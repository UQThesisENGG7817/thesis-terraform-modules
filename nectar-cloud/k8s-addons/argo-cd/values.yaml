## Argo CD configuration
## Ref: https://github.com/argoproj/argo-cd
##

# -- Provide a name in place of `argocd`
nameOverride: "argo-cd"

## Custom resource configuration
crds:
  # -- Install and upgrade CRDs
  install: true
  # -- Keep CRDs on chart uninstall
  keep: true
  # -- Annotations to be added to all CRDs
  annotations: {}

# global:
#   nodeSelector:
#     nodegroup-role: main

## Argo Configs
configs:
  # General Argo CD configuration
  ## Ref: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/argocd-cm.yaml
  cm:
    # -- Create the argocd-cm configmap for [declarative setup]
    create: true

    # -- Config for kustomize with Helm
    kustomize.buildOptions: --enable-helm

    # -- Enable status badge
    statusbadge.enabled: true

    # -- User for Argo Image Updater
    accounts.image-updater: apiKey

    # -- Argo CD's externally facing base URL (optional). Required when configuring SSO
    url: "https://cd.pinnamon.com"

    # -- The name of tracking label used by Argo CD for resource pruning
    # @default -- Defaults to app.kubernetes.io/instance
    application.instanceLabelKey: argocd.argoproj.io/instance

    # -- Enable logs RBAC enforcement
    ## Ref: https://argo-cd.readthedocs.io/en/latest/operator-manual/upgrading/2.3-2.4/#enable-logs-rbac-enforcement
    server.rbac.log.enforce.enable: false

    # -- Enable exec feature in Argo UI
    ## Ref: https://argo-cd.readthedocs.io/en/latest/operator-manual/rbac/#exec-resource
    exec.enabled: true

    # -- Enable local admin user
    ## Ref: https://argo-cd.readthedocs.io/en/latest/faq/#how-to-disable-admin-user
    admin.enabled: true

    # -- Timeout to discover if a new manifests version got published to the repository
    timeout.reconciliation: 180s

    # -- Timeout to refresh application data as well as target manifests cache
    timeout.hard.reconciliation: 0s
      # staticClients:
      #   - id: $argocd-sso-secret:github.clientID
      #     name: Argo Workflow
      #     redirectURIs:
      #       - $argocd-sso-secret:workflow.callback_url
      #     secretEnv: ARGO_WORKFLOWS_SSO_CLIENT_SECRET
    # Dex configuration
    dex.config: |
      connectors:
        - type: github
          id: github
          name: GitHub
          config:
            clientID: $github.clientID
            clientSecret: $github.clientSecret
            orgs:
            - name: $github.org
      # Argo CD sensitive data
  credentialTemplates:
    https-creds:
      url: https://github.com/UQThesisENGG7817
      password: ""
      username: ""

  # Argo CD sensitive data
  # Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/#sensitive-data-and-sso-client-secrets
  secret:
    # -- add additional secrets to be added to argocd-secret
    ## Custom secrets. Useful for injecting SSO secrets into environment variables.
    ## Ref: https://argo-cd.readthedocs.io/en/stable/operator-manual/user-management/#sensitive-data-and-sso-client-secrets
    ## Note that all values must be non-empty.
    extra:
      github.org: UQThesisENGG7817
  params:
    # # -- Annotations to be added to the argocd-cmd-params-cm ConfigMap
    # annotations: {}

    # ## Generic parameters
    # # -- Open-Telemetry collector address: (e.g. "otel-collector:4317")
    # otlp.address: ''

    # ## Controller Properties
    # # -- Number of application status processors
    # controller.status.processors: 20
    # # -- Number of application operation processors
    # controller.operation.processors: 10
    # # -- Specifies timeout between application self heal attempts
    # controller.self.heal.timeout.seconds: 5
    # # -- Repo server RPC call timeout seconds.
    # controller.repo.server.timeout.seconds: 60

    ## Server properties
    # -- Run server without TLS
    server.insecure: true
    # -- Value for base href in index.html. Used if Argo CD is running behind reverse proxy under subpath different from /
    # server.basehref: /
    # # -- Used if Argo CD is running behind reverse proxy under subpath different from /
    # server.rootpath: ''
    # # -- Directory path that contains additional static assets
    # server.staticassets: /shared/app
    # # -- Disable Argo CD RBAC for user authentication
    # server.disable.auth: false
    # # -- Enable GZIP compression
    # server.enable.gzip: false
    # # -- Set X-Frame-Options header in HTTP responses to value. To disable, set to "".
    # server.x.frame.options: sameorigin

    ## Repo-server properties
    # -- Limit on number of concurrent manifests generate requests. Any value less the 1 means no limit.
    # reposerver.parallelism.limit: 0

  # Argo CD RBAC policy configuration
  ## Ref: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/rbac.md
  rbac:
    # -- Create the argocd-rbac-cm configmap with ([Argo CD RBAC policy]) definitions.
    # If false, it is expected the configmap will be created by something else.
    # Argo CD will not work if there is no configmap created with the name above.
    # create: true

    # -- Annotations to be added to argocd-rbac-cm configmap
    annotations: {}

    # -- The name of the default role which Argo CD will falls back to, when authorizing API requests (optional).
    # If omitted or empty, users may be still be able to login, but will see no apps, projects, etc...
    policy.default: 'role:readonly'

    # -- File containing user-defined policies and role definitions.
    # @default -- `''` (See [values.yaml])
    # policy.csv: ''
    # Policy rules are in the form:
    #  p, subject, resource, action, object, effect
    # Role definitions and bindings are in the form:
    #  g, subject, inherited-subject
    policy.csv: |
      p, role:org-admin, applications, *, */*, allow
      p, role:org-admin, clusters, get, *, allow
      p, role:org-admin, repositories, get, *, allow
      p, role:org-admin, repositories, create, *, allow
      p, role:org-admin, repositories, update, *, allow
      p, role:org-admin, repositories, delete, *, allow
      p, role:org-admin, projects, get, *, allow
      p, role:org-admin, projects, create, *, allow
      p, role:org-admin, projects, update, *, allow
      p, role:org-admin, projects, delete, *, allow
      p, role:org-admin, logs, get, *, allow
      p, role:org-admin, exec, create, */*, allow

      g, UQThesisENGG7817:devops-team, role:org-admin

    # -- OIDC scopes to examine during rbac enforcement (in addition to `sub` scope).
    # The scope value can be a string, or a list of strings.
    scopes: "[groups]"

          
repositories:
    karpenter-oci-helm-repo:
      url: public.ecr.aws/karpenter/karpenter
      type: helm
      name: karpenter
      enableOCI: "true"
    gha-runner-scale-set-controller-oci-helm-repo:
      url: ghcr.io/actions/actions-runner-controller-charts/gha-runner-scale-set-controller
      type: helm
      name: gha-runner-scale-set-controller
      enableOCI: "true"
    gha-runner-scale-set-oci-helm-repo:
      url: ghcr.io/actions/actions-runner-controller-charts/gha-runner-scale-set
      type: helm
      name: gha-runner-scale-set
      enableOCI: "true"
    # istio-helm-repo:
    #   url: https://storage.googleapis.com/istio-prerelease/daily-build/master-latest-daily/charts
    #   name: istio.io
    #   type: helm
    # private-helm-repo:
    #   url: https://my-private-chart-repo.internal
    #   name: private-repo
    #   type: helm
    #   password: my-password
    #   username: my-username
    # private-repo:
    #   url: https://github.com/argoproj/private-repo

  # Argo CD configuration parameters
  ## Ref: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/argocd-cmd-params-cm.yaml

# ## Dex
# dex:
#   # -- Environment variables to pass to the Dex server
#   env:
#   - name: ARGO_WORKFLOWS_SSO_CLIENT_SECRET
#     valueFrom:
#       secretKeyRef:
#         key: github.clientSecret
#         name: argocd-sso-secret

## Server
server:
  ## Argo UI extensions
  ## This function in tech preview stage, do expect unstability or breaking changes in newer versions.
  ## Ref: https://github.com/argoproj-labs/argocd-extensions
  extensions:
    # -- Enable support for Argo UI extensions
    enabled: true

  ingress:
    # -- Enable an ingress resource for the Argo CD server
    enabled: true
    # -- Additional ingress annotations
    annotations: # {}
    # If you encounter a redirect loop or are getting a 307 response code
    # then you need to force the nginx ingress to connect to the backend using HTTPS.
       nginx.ingress.kubernetes.io/ssl-passthrough: "true"
       nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
    # -- Additional ingress labels
    labels: {}
    # -- Defines which ingress controller will implement the resource
    ingressClassName: nginx

    # -- List of ingress hosts
    ## Argo Ingress.
    ## Hostnames must be provided if Ingress is enabled.
    ## Secrets must be manually created in the namespace
    hosts:
      - cd.pinnamon.com

    # -- List of ingress paths
    paths:
      - /
    # -- Ingress path type. One of `Exact`, `Prefix` or `ImplementationSpecific`
    pathType: Prefix
    # -- Additional ingress paths
    extraPaths:
      []
      # - path: /*
      #   backend:
      #     serviceName: ssl-redirect
      #     servicePort: use-annotation
      ## for Kubernetes >=1.19 (when "networking.k8s.io/v1" is used)
      # - path: /*
      #   pathType: Prefix
      #   backend:
      #     service:
      #       name: ssl-redirect
      #       port:
      #         name: use-annotation

    # -- Ingress TLS configuration
    tls:
    - hosts:
      - cd.pinnamon.com
      secretName: cd-pinnamon-ca-tls
      # - secretName: your-certificate-name
      #   hosts:
      #     - argocd.example.com

    # -- Uses `server.service.servicePortHttps` instead `server.service.servicePortHttp`
    https: false

notfications:
  # -- Enable notifications controller
  enabled: false

  # -- Additional container environment variables
  extraEnv:
    - name: TZ
      value: Australia/Brisbane

  # -- Notifications controller log level. One of: `debug`, `info`, `warn`, `error`
  # @default -- `""` (defaults to global.logging.level)
  logLevel: debug

  # -- Define user-defined context
  ## For more information: https://argocd-notifications.readthedocs.io/en/stable/templates/#defining-user-defined-context
  context: {}
    # region: east
    # environmentName: staging

  secret:
    # -- Whether helm chart creates notifications controller secret
    create: true

  # -- Configures notification services such as slack, email or custom webhook
  # @default -- See [values.yaml]
  ## For more information: https://argocd-notifications.readthedocs.io/en/stable/services/overview/
  notifiers:
    service.email.gmail: |
      username: "ArgoCD notification"
      password: $email-password
      host: smtp.gmail.com
      port: 465
      from: $email-username
  templates:
    template.app-created: |
      email:
        subject: Application {{.app.metadata.name}} has been created.
      message: Application {{.app.metadata.name}} has been created.
      teams:
        title: Application {{.app.metadata.name}} has been created.
    template.app-deleted: |
      email:
        subject: Application {{.app.metadata.name}} has been deleted.
      message: Application {{.app.metadata.name}} has been deleted.
      teams:
        title: Application {{.app.metadata.name}} has been deleted.
    template.chart-sync-running: |
      email:
        subject: Start syncing application {{.app.metadata.name}}.
      message: |
      :rocket::rocket:{{end}} The sync operation of application `{{.app.metadata.name}}` has *started* at {{ (call .time.Parse .app.status.operationState.startedAt).Local.Format "2006-01-02T15:04:05Z07:00" }}.
      :point_right:{{end}} Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .
      attachments: |-
          [{
            "title": "{{ .app.metadata.name}}",
            "title_link":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
            "color": "#0DADEA",
            "fields": [
            {
              "title": "Sync Status",
              "value": "{{.app.status.sync.status}}",
              "short": true
            },
            {
              "title": "Environment",
              "value": "{{ .context.environmentName }}",
              "short": true
            },
            {
              "title": "Chart Repo",
              "value": "{{.app.spec.source.repoURL}}",
              "short": true
            },
            {
              "title": "Chart Name",
              "value": "{{.app.spec.source.chart}}",
              "short": true
            },
            {
              "title": "Revision",
              "value": "{{.app.status.sync.revision}}",
              "short": true
            }
            {{range $index, $c := .app.status.conditions}}
            {{if not $index}},{{end}}
            {{if $index}},{{end}}
            {
              "title": "{{$c.type}}",
              "value": "{{$c.message}}",
              "short": true
            }
            {{end}}
            ]
          }]
    template.chart-deployed: |
      email:
        subject: New version of an application {{.app.metadata.name}} is up and running.
      message: |
        :white_check_mark::white_check_mark:{{end}} Application `{{.app.metadata.name}}` is now running new version of deployments manifests.
      attachments: |
          [{
            "title": "{{ .app.metadata.name}}",
            "title_link":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}",
            "color": "#18be52",
            "fields": [
            {
              "title": "Sync Status",
              "value": "{{.app.status.sync.status}}",
              "short": true
            },
            {
              "title": "Environment",
              "value": "{{ .context.environmentName }}",
              "short": true
            },
            {
              "title": "Chart Repo",
              "value": "{{.app.spec.source.repoURL}}",
              "short": true
            },
            {
              "title": "Chart Name",
              "value": "{{.app.spec.source.chart}}",
              "short": true
            },
            {
              "title": "Revision",
              "value": "{{.app.status.sync.revision}}",
              "short": true
            }
            {{range $index, $c := .app.status.conditions}}
            {{if not $index}},{{end}}
            {{if $index}},{{end}}
            {
              "title": "{{$c.type}}",
              "value": "{{$c.message}}",
              "short": true
            }
            {{end}}
            ]
          }]
  # -- The trigger defines the condition when the notification should be sent
  ## For more information: https://argocd-notifications.readthedocs.io/en/stable/triggers/
  triggers:
    trigger.on-created: |
      - description: Application is created.
        oncePer: app.metadata.name
        send:
        - app-created
        when: "true"
    trigger.on-deleted: |
      - description: Application is deleted.
        oncePer: app.metadata.name
        send:
        - app-deleted
        when: app.metadata.deletionTimestamp != nil
    trigger.on-chart-deployed: |
      - description: Application is synced and healthy. Triggered once per commit.
        oncePer: app.status.sync.revision
        send:
        - chart-deployed
        when: app.status.operationState.phase in ['Succeeded'] and app.status.health.status == 'Healthy' and app.spec.source.chart != nil
    trigger.on-chart-health-degraded: |
      - description: Application has degraded
        send:
        - chart-health-degraded
        when: app.status.health.status == 'Degraded' and app.spec.source.chart != nil
    trigger.on-chart-sync-running: |
      - description: Application is being synced
        send:
        - chart-sync-running
        when: app.status.operationState.phase in ['Running'] and app.spec.source.chart != nil
    trigger.on-chart-sync-succeeded: |
      - description: Application syncing has succeeded
        send:
        - chart-sync-succeeded
        when: app.status.operationState.phase in ['Succeeded'] and app.spec.source.chart != nil

    #
    # For more information: https://argocd-notifications.readthedocs.io/en/stable/triggers/#default-triggers
    defaultTriggers: |
      - on-chart-deployed
      - on-chart-health-degraded
      - on-chart-sync-failed
      - on-chart-sync-running
      - on-chart-sync-succeeded